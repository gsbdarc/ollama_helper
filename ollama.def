Bootstrap: docker
From: ollama/ollama:{{ OLLAMA_TAG }}

%arguments
    OLLAMA_TAG=latest
    # The default scratch base directory. This value is overridden at runtime if desired.
    SCRATCH_BASE=<your-scratch-dir-here>

%environment
    # Save the build-time SCRATCH_BASE into DEFAULT_SCRATCH_BASE for fallback.
    export DEFAULT_SCRATCH_BASE="{{ SCRATCH_BASE }}"

%post
    # Minimal post-install: update and install curl.
    apt-get update -yq && apt-get install -y curl && apt-get clean

%startscript
#!/bin/bash
# This script runs when the instance starts.
set -o errexit -o noglob

# Use the runtime value for SCRATCH_BASE if provided; otherwise, use the build-time default.
SCRATCH_BASE="${SCRATCH_BASE:-$DEFAULT_SCRATCH_BASE}"
if [ -z "${SCRATCH_BASE}" ] || [ "${SCRATCH_BASE}" = "<your-scratch-dir-here>" ]; then
    echo "ERROR: SCRATCH_BASE is not set. Provide a valid scratch directory via a build argument or runtime override." >&2
    exit 1
fi

# Ensure SCRATCH_BASE exists.
mkdir -p "${SCRATCH_BASE}"

# Create a directory for Ollama models (under SCRATCH_BASE).
OLLAMA_MODELS="${SCRATCH_BASE}/ollama/models"
mkdir -p "${OLLAMA_MODELS}"
export OLLAMA_MODELS

# Force HOME to a writable directory under SCRATCH_BASE.
NEW_HOME="${SCRATCH_BASE}/home"
mkdir -p "${NEW_HOME}" || { echo "ERROR: Failed to create writable home at ${NEW_HOME}." >&2; exit 1; }
export HOME="${NEW_HOME}"

# Simple random port generator using a hardcoded ephemeral range.
get_random_port() {
    LOWERPORT=32768
    UPPERPORT=60999
    PORTRANGE=$(( UPPERPORT - LOWERPORT ))
    while :; do
        PORT=$(( LOWERPORT + ( RANDOM % PORTRANGE ) ))
        # Test the port using Bash's /dev/tcp feature.
        if bash -c "echo -n > /dev/tcp/127.0.0/${PORT}" 2>/dev/null; then
            continue  # Port is in use; try another.
        else
            echo "${PORT}"
            return 0
        fi
    done
    return 1
}

# Set OLLAMA_PORT if not provided.
if [ -z "${OLLAMA_PORT:-}" ]; then
    echo "INFO: OLLAMA_PORT not set, selecting a random port." >&2
    OLLAMA_PORT="$(get_random_port)" || { echo "ERROR: Failed to get a random port." >&2; exit 1; }
fi

# Determine the node's IP address.
HOST_IP=$(hostname -i | awk '{print $1}')
# Set the advertised endpoint.
export OLLAMA_HOST="${HOST_IP}:${OLLAMA_PORT}"

# Print endpoint information and log it.
LOGFILE="${SCRATCH_BASE}/instance_start.log"
{
  echo "========================================================"
  echo "INFO: Ollama server is running on host: ${HOST_IP}"
  echo "INFO: Port: ${OLLAMA_PORT}"
  echo "INFO: Connect to: http://${HOST_IP}:${OLLAMA_PORT}/api/generate"
  echo "INFO: Log file: ${LOGFILE}"
  echo "========================================================"
} | tee -a "${LOGFILE}"

# Write the endpoint info to a file for later sourcing in %runscript.
echo "export OLLAMA_HOST=${HOST_IP}:${OLLAMA_PORT}" > /tmp/ollama_env.sh

# Start the Ollama server.
exec ollama serve

%runscript
#!/bin/bash
# For client commands, source the endpoint information.
if [ -f /tmp/ollama_env.sh ]; then
    source /tmp/ollama_env.sh
fi
exec "$@"

